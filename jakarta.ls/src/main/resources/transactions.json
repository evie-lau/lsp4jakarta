{
    "Jakarta Transactions - UserTransaction object via injection": {
        "prefix": "tx_user_inject",
        "body": [
            "@Resource",
            "UserTransaction ${1:transactionName};",
            "",
            "public void ${2:functionName}(){",
            "\ttry {",
            "\t\t${1:transactionName}.begin();",
            "",
            "\t\t/* operation */",
            "\t",
            "\t\t${1:transactionName}.commit();",
            "\t} catch (Exception e1) {",
            "\t\ttry {",
            "\t\t\t${1:transactionName}.rollback();",
            "\t\t} catch (Exception e2){",
            "\t\t\te2.printStackTrace();",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "Initializes a UserTransaction object via injection",
        "context": {
            "type": "jakarta.transaction.UserTransaction",
            "contentType": "method"
        }
    },
    "Jakarta Transactions - UserTransaction object via JNDI lookup": {
        "prefix": "tx_user_jndi",
        "body": [
            "Context context = new InitialContext();",
            "UserTransaction ${1:transactionName} = (UserTransaction) context.lookup(\"${2:address}\");",
            "",
            "try {",
            "\t${1:transactionName}.begin();",
            "",
            "\t/* operation */",
            "",
            "\t${1:transactionName}.commit();",
            "} catch (Exception e1) {",
            "\ttry {",
            "\t\t${1:transactionName}.rollback();",
            "\t} catch (Exception e2){",
            "\t\te2.printStackTrace();",
            "\t}",
            "}"
        ],
        "description": "Initializes a UserTransaction object via JNDI lookup",
        "context": {
            "type": "jakarta.transaction.UserTransaction",
            "contentType": "method"
        }
    },
    "Jakarta Transactions - @Transactional": {
        "prefix": "@Transactional",
        "body": [
            "@Transactional(",
            "\trollbackOn={SQLException.class, IOException.class},",
            "\tdontRollbackOn={IllegalStateException.class})"
        ],
        "description": "Transactional annotation with rollbackOn and dontRollbackOn",
        "context": {
            "type": "jakarta.transaction.Transactional",
            "contentType": "method-annotation"
        }
    }
}